syntax = "proto2";
option java_package = "org.apache.hadoop.hdfs.protocol.proto";
option java_outer_classname = "RouterProtocolProtos";
option java_generic_services = true;
option java_generate_equals_and_hash = true;package hadoop.hdfs.router;

import "FederationProtocol.proto";

service RouterAdminProtocolService {
  /**
   * Add a mount table entry.
   */
  rpc addMountTableEntry(AddMountTableEntryRequestProto) returns(AddMountTableEntryResponseProto);

  /**
   * Update an existing mount table entry without copying files.
   */
  rpc updateMountTableEntry(UpdateMountTableEntryRequestProto) returns(UpdateMountTableEntryResponseProto);

  /**
   * Remove a mount table entry.
   */
  rpc removeMountTableEntry(RemoveMountTableEntryRequestProto) returns(RemoveMountTableEntryResponseProto);

  /**
   * Get matching mount entries
   */
  rpc getMountTableEntries(GetMountTableEntriesRequestProto) returns(GetMountTableEntriesResponseProto);

  /**
   * Transform Router state to safe mode state.
   */
  rpc enterSafeMode(EnterSafeModeRequestProto) returns (EnterSafeModeResponseProto);

  /**
   * Transform Router state from safe mode to running state.
   */
  rpc leaveSafeMode(LeaveSafeModeRequestProto) returns (LeaveSafeModeResponseProto);

  /**
   * Verify if current Router state is safe mode state.
   */
  rpc getSafeMode(GetSafeModeRequestProto) returns (GetSafeModeResponseProto);

  /**
   * Disable a name service.
   */
  rpc disableNameservice(DisableNameserviceRequestProto) returns (DisableNameserviceResponseProto);

  /**
   * Enable a name service.
   */
  rpc enableNameservice(EnableNameserviceRequestProto) returns (EnableNameserviceResponseProto);

  /**
   * Get the list of disabled name services.
   */
  rpc getDisabledNameservices(GetDisabledNameservicesRequestProto) returns (GetDisabledNameservicesResponseProto);

  /**
   * Refresh mount entries
   */
  rpc refreshMountTableEntries(RefreshMountTableEntriesRequestProto) returns(RefreshMountTableEntriesResponseProto);

  /**
   * Get the destination of a file/directory in the federation.
   */
  rpc getDestination(GetDestinationRequestProto) returns (GetDestinationResponseProto);

  /**
   * Refresh superuser proxy groups mappings on Router.
   */
  rpc refreshSuperUserGroupsConfiguration(RefreshSuperUserGroupsConfigurationRequestProto) returns (RefreshSuperUserGroupsConfigurationResponseProto);
}